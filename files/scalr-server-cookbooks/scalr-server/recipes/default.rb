# There's a bit of dark magic going on here, but the idea is that
# - We ensure our configuration dir is ready first
# - We check if a configuration file exists, and if it does, then we load it into the ScalrServer library. The
#   configuration file is basically #   an attributes file, except it must not have the leading default[:scalr_server].
#   For example: `default[:scalr_server][:app][:some_config] = ...` becomes `app[:some_config] = ...`.
# - We load the attributes generated by the ScalrServer library into our node attributes. This includes both attributes
#   loaded from the configuration file, and secrets (loaded from a separate JSON file, though they can be overridden in
#   the config file â€” either way they'll be persisted in the JSON file).

directory node[:scalr_server][:config_dir] do
  owner   'root'
  group   'root'
  mode    '0775'
  action :nothing
end.run_action(:create)

# Load attributes from the configuration files. Ordering matters here
if File.exists?(ScalrServer.config_file_path node)
  ScalrServer.from_file(ScalrServer.config_file_path node)
end
node.consume_attributes(ScalrServer.generate_config node)

# Deploy services
%w{mysql app}.each do |service|
  if node[:scalr_server][service][:enable]
    include_recipe "scalr-server::group_#{service}_enabled"
  else
    include_recipe "scalr-server::group_#{service}_disabled"
  end
end
